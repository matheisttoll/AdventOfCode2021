(in-package #:aoc2021)

(defun 09-read-input (path)
  (let ((lines (iter (for line in-file path using #'read-line)
                  (collect (map 'vector #'digit-char-p line)))))
    (make-array (list (length lines) (length (first lines)))
                :initial-contents lines)))


(defun 09-collect-low-points (array &aux (result ()))
  (destructuring-bind (rows cols) (array-dimensions array)
    (iter (for r from 0 below rows)
      (iter (for c from 0 below cols)
        (when (and (or (= r 0)
                       (> (aref array (1- r) c) (aref array r c)))
                   (or (= r (1- rows))
                       (> (aref array (1+ r) c) (aref array r c)))
                   (or (= c 0)
                       (> (aref array r (1- c)) (aref array r c)))
                   (or (= c (1- cols))
                       (> (aref array r (1+ c)) (aref array r c))))
          (push (cons r c) result)))))
  result)


(defun 09-solve-1 (&optional (path "09/09.txt") &aux (array (09-read-input path)))
  (iter (for (r . c) in (09-collect-low-points array))
    (sum (1+ (aref array r c)))))


;; Find the sizes of the basins with a simple depth-first-search
;; with list based queu.
(defun 09-basin-search (array start)
  (let ((queue (list start))
        (found (make-hash-table :test 'equalp)))
    (setf (gethash start found) t)
    (iter (with (rows cols) = (array-dimensions array))
          (until (endp queue))
          (for (r . c) = (pop queue))
      (counting t)
      (unless (or (= r 0)
                  (= 9 (aref array (1- r) c))
                  #1=(gethash #2=(cons (1- r) c) found))
        (push #2# queue)
        (setf #1# t))
      (unless (or (= r (1- rows))
                  (= 9 (aref array (1+ r) c))
                  #3=(gethash #4=(cons (1+ r) c) found))
        (push #4# queue)
        (setf #3# t))
      (unless (or (= c 0)
                  (= 9 (aref array r (1- c)))
                  #5=(gethash #6=(cons r (1- c)) found))
        (push #6# queue)
        (setf #5# t))
      (unless (or (= c (1- cols))
                  (= 9 (aref array r (1+ c)))
                  #7=(gethash #8=(cons r (1+ c)) found))
        (push #8# queue)
        (setf #7# t)))))


(defun 09-solve-2 (&optional (path "09/09.txt"))
  (let* ((array (09-read-input path))
         (sizes (sort (mapcar (curry #'09-basin-search array)
                             (09-collect-low-points array))
                     #'>)))
    (* (first sizes) (second sizes) (third sizes))))
